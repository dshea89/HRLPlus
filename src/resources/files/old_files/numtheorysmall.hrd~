% NUMTHEORY SMALL
% By Simon Colton, 14th November 2001

int001
integer(I)
otter:""
ascii:@I@ is an integer
integer(1).integer(2).integer(3).integer(4).integer(5).
integer(6).integer(7).integer(8).integer(9).integer(10).
integer(11).integer(12).integer(13).integer(14).integer(15).
integer(16).integer(17).integer(18).integer(19).integer(20).
integer(21).integer(22).integer(23).integer(24).integer(25).
integer(26).integer(27).integer(28).integer(29).integer(30).
integer(31).integer(32).integer(33).integer(34).integer(35).
integer(36).integer(37).integer(38).integer(39).integer(40).
integer(41).integer(42).integer(43).integer(44).integer(45).
integer(46).integer(47).integer(48).integer(49).integer(50).

int002
leq(I,L)
ascii:@L@=<@I@
leq(I,L) -> integer(I)
leq(I,L) -> integer(L)
Code

int003
divisor(I,D)
ascii:@D@|@I@
divisor(I,D) -> integer(I)
divisor(I,D) -> integer(D)
divisor(I,D) -> leq(I,D)
Code

int004
digit(I,D)
ascii:@D@ is a digit of @I@
digit(I,D) -> integer(I)
digit(I,D) -> integer(D)
digit(I,D) -> leq(I,D)
Code

int005
multiplication(I,A,B)
ascii:@A@*@B@=@I@
multiplication(I,A,B) -> integer(I)
multiplication(I,A,B) -> integer(A)
multiplication(I,A,B) -> integer(B)
multiplication(I,A,B) -> leq(I,A)
multiplication(I,A,B) -> leq(I,B)
multiplication(I,A,B) -> divisor(I,A)
multiplication(I,A,B) -> divisor(I,B)
multiplication(I,A,B) -> multiplication(I,B,A)
function: 0,1=2
function: 0,2=1
function: 1,2=0
Code

int006
addition(I,A,B)
ascii:@A@+@B@=@I@
addition(I,A,B) -> integer(I)
addition(I,A,B) -> integer(A)
addition(I,A,B) -> integer(B)
addition(I,A,B) -> leq(I,A)
addition(I,A,B) -> leq(I,B)
addition(I,A,B) -> addition(I,B,A)
function: 0,1=2
function: 0,2=1
function: 1,2=0
Code

int007
binary(I,P,B)
ascii:bin(@I@,@P@)=@B@
binary(I,P,B) -> integer(I)
binary(I,P,B) -> integer(P)
binary(I,P,B) -> integer(B)
binary(I,P,B) -> leq(I,B)
function: 0,1=2
Code

int008
tau(I,P)
ascii:tau(@I@)=@P@
tau(I,P) -> integer(I)
tau(I,P) -> integer(P)
function: 0=1
Code

int009
sigma(I,P)
ascii:sigma(@I@)=@P@
sigma(I,P) -> integer(I)
sigma(I,P) -> integer(P)
function: 0=1
Code

int010
phi(I,P)
ascii:phi(@I@)=@P@
phi(I,P) -> integer(I)
phi(I,P) -> integer(P)
function: 0=1
Code

int011
prevprime(I,P)
ascii:prevprime(@I@)=@P@
prevprime(I,P) -> integer(I)
prevprime(I,P) -> integer(P)
function: 0=1
Code

int012
isprime(P)
ascii:isprime(@P@)
isprime(P) -> integer(P)
Code

int013
isrefactorable(P)
ascii:isrefactorable(@P@)
isrefactorable(P) -> integer(P)
Code

int014
issqrfree(P)
ascii:issqrfree(@P@)
issqrfree(P) -> integer(P)
Code

int015
issquare(P)
ascii:issquare(@P@)
issquare(P) -> integer(P)
Code

int016
isodd(P)
ascii:isodd(@P@)
isodd(P) -> integer(P)
Code

int017
iseven(P)
ascii:iseven(@P@)
iseven(P) -> integer(P)
Code

