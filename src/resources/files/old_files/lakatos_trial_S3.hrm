clickList("domain_list", "lakatos_trial.hrd", "true");
clickButton("initial_entity_none_button");
clickList("initial_entity_list", "group:0", "true");
clickList("initial_entity_list", "group:0110", "true");
clickList("initial_entity_list", "group:012120201", "true");
clickList("initial_entity_list", "group:0123103223103201", "true");
clickList("initial_entity_list", "group:0123103223013210", "true");
clickList("initial_entity_list", "group:0123412340234013401240123", "true");
clickList("initial_entity_list", "group:012345120534201453345012453201534120", "true");
clickList("initial_entity_list", "group:012345120453201534345012453120534201", "true");
clickList("initial_entity_list", "group0123456123456023456013456012456012356012346012345:", "true");
clickList("initial_entity_list", "group:0123456710325476230167453210765445670123547610326745230176543210", "true");
clickList("initial_entity_list", "group:0123456710325476230167453210765445672301547632106745012376541032", "true");
clickList("initial_entity_list", "group:0123456710325476230176543210674545670123547610326745321076542301", "true");
clickList("initial_entity_list", "group:0123456710325476231076453201675445671032547601236754231076453201", "true");
clickList("initial_entity_list", "group:0123456710325476231067543201764545672310547632016754103276450123", "true");
clickCheckbox("disjunct_check", "false");
clickCheckbox("embed_algebra_check", "false");
clickCheckbox("embed_graph_check", "false");
clickCheckbox("equal_check", "false");
clickCheckbox("record_check", "false");
clickList("split_values_list", "integer:1", "true");
clickList("split_values_list", "integer:2", "true");
clickList("conjecture_formatting_list", "ascii format", "false");
clickList("conjecture_formatting_list", "simplified format", "true");
clickCheckbox("make_near_equivalences_check", "true");
setText("near_equivalence_percent_text", "60");
clickCheckbox("use_communal_piecemeal_exclusion_check", "false");
clickCheckbox("use_surrender_check", "false");
clickCheckbox("use_piecemeal_exclusion_check", "true");
clickCheckbox("use_strategic_withdrawal_check", "false");
clickCheckbox("use_monster_barring_check", "false");
clickCheckbox("use_monster_adjusting_check", "false");
clickCheckbox("use_lemma_incorporation_check", "false");
clickButton("start_button");
clickList("force_primary_concept_list", "group003", "true");
clickList("force_secondary_concept_list", "group003", "true");
clickList("force_prodrule_list", "compose", "true");
clickList("force_parameter_list", "[1, 3, 2, 4]: [a, b, c, d] : a is a group & b in a & c in a & d in a & b*c=d & c*b=d", "true");
clickButton("force_button");
clickList("force_primary_concept_list", "g7_0", "true");
clickList("force_prodrule_list", "size", "true");
clickList("force_parameter_list", "[1, 2, 3]: [a, b] : a is a group & a & b=|{(c d e): c in a & d in a & e in a & c*d=e & d*c=e}|", "true");
clickButton("force_button");
clickList("force_primary_concept_list", "group003", "true");
clickList("force_prodrule_list", "size", "true");
clickList("force_parameter_list", "[1, 2, 3]: [a, b] : a is a group & a & b=|{(c d e): c in a & d in a & e in a & c*d=e}|", "true");
clickButton("force_button");
clickList("force_primary_concept_list", "g9_0", "true");
clickList("force_secondary_concept_list", "g8_0", "true");
clickList("force_prodrule_list", "compose", "true");
clickList("force_parameter_list", "[1, 2]: [a, b] : a is a group & a & b=|{(c d e): c in a & d in a & e in a & c*d=e}| & b=|{(f g h): f in a & g in a & h in a & f*g=h & g*f=h}|", "true");
clickButton("force_button");
clickList("force_primary_concept_list", "g10_0", "true");
clickList("force_prodrule_list", "exists", "true");
clickList("force_parameter_list", "[1]: [a] : a is a group & exists b (a & b=|{(c d e): c in a & d in a & e in a & c*d=e & d*c=e}| & b=|{(f g h): f in a & g in a & h in a & f*g=h}|)", "true");
clickButton("force_button");
clickList("force_primary_concept_list", "g7_0", "true");
clickList("force_secondary_concept_list", "group003", "true");
clickList("force_prodrule_list", "negate", "true");
clickList("force_parameter_list", "[]: [a, b, c, d] : a is a group & b in a & c in a & d in a & b*c=d & -(c*b=d)", "true");
clickButton("force_button");
clickList("force_primary_concept_list", "g12_0", "true");
clickList("force_prodrule_list", "exists", "true");
clickList("force_parameter_list", "[3]: [a, b, c] : a is a group & b in a & c in a & exists d (d in a & b*c=d & -(c*b=d))", "true");
clickButton("force_button");
