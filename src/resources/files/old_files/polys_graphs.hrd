% POLYHEDRA SMALL
% By Alison Pease, 22nd October 2003

int001
integer(I)
ascii:@I@ is an integer
integer(1).integer(2).integer(3).integer(4).integer(5).
integer(6).integer(7).integer(8).integer(9).integer(10).
integer(11).integer(12).integer(13).integer(14).integer(15).
integer(16).integer(17).integer(18).integer(19).integer(20).
integer(21).integer(22).integer(23).integer(24).integer(25).
integer(26).integer(27).integer(28).integer(29).integer(30).
integer(31).integer(32).integer(33).integer(34).integer(35).
integer(36).integer(37).integer(38).integer(39).integer(40).
integer(41).integer(42).integer(43).integer(44).integer(45).
integer(46).integer(47).integer(48).integer(49).integer(50).
integer(51).integer(52).integer(53).integer(54).integer(55).
integer(56).integer(57).integer(58).integer(59).integer(60).
integer(61).integer(62).integer(63).integer(64).integer(65).
integer(66).integer(67).integer(68).integer(69).integer(70).
integer(71).integer(72).integer(73).integer(74).integer(75).
integer(76).integer(77).integer(78).integer(79).integer(80).
integer(81).integer(82).integer(83).integer(84).integer(85).
integer(86).integer(87).integer(88).integer(89).integer(90).
integer(91).integer(92).integer(93).integer(94).integer(95).
integer(96).integer(97).integer(98).integer(99).integer(100).

int006
addition(I,A,B)
ascii:@A@+@B@=@I@
addition(I,A,B) -> integer(I)
addition(I,A,B) -> integer(A)
addition(I,A,B) -> integer(B)
addition(I,A,B) -> addition(I,B,A)
function: 0,1=2
function: 0,2=1
function: 1,2=0
Code

poly001
polyhedron(P)
otter:""
ascii:@P@ is a polyhedron
polyhedron(cube).
polyhedron(tetrahedron).
polyhedron(octahedron).

poly002
vertex(P,V)
ascii:@V@ is a vertex of @P@
vertex(P,V) -> polyhedron(P)
vertex(cube,a).
vertex(cube,b).
vertex(cube,c).
vertex(cube,d).
vertex(cube,e).
vertex(cube,f).
vertex(cube,g).
vertex(cube,h).
vertex(tetrahedron,a).
vertex(tetrahedron,b).
vertex(tetrahedron,c).
vertex(tetrahedron,d).
vertex(octahedron,a).
vertex(octahedron,b).
vertex(octahedron,c).
vertex(octahedron,d).
vertex(octahedron,e).
vertex(octahedron,f).


poly003
edge(P,E)
ascii:@E@ is an edge of @P@
edge(P,E) -> polyhedron(P)
edge(cube,e1).
edge(cube,e2).
edge(cube,e3).
edge(cube,e4).
edge(cube,e5).
edge(cube,e6).
edge(cube,e7).
edge(cube,e8).
edge(cube,e9).
edge(cube,e10).
edge(cube,e11).
edge(cube,e12).
edge(tetrahedron,e1).
edge(tetrahedron,e2).
edge(tetrahedron,e3).
edge(tetrahedron,e4).
edge(tetrahedron,e5).
edge(tetrahedron,e6).
edge(octahedron,e1).
edge(octahedron,e2).
edge(octahedron,e3).
edge(octahedron,e4).
edge(octahedron,e5).
edge(octahedron,e6).
edge(octahedron,e7).
edge(octahedron,e8).
edge(octahedron,e9).
edge(octahedron,e10).
edge(octahedron,e11).
edge(octahedron,e12).


poly009
face(F)
ascii:@F@ is a face
face(f1).
face(f2).
face(f3).
face(f4).
face(f5).
face(f6).
face(f7).
face(f8).


poly004
face(P,F)
ascii:@F@ is a face of @P@
face(P,F) -> polyhedron(P)
face(P,F) -> face(F)
face(cube,f1).
face(cube,f2).
face(cube,f3).
face(cube,f4).
face(cube,f5).
face(cube,f6).
face(tetrahedron,f1).
face(tetrahedron,f2).
face(tetrahedron,f3).
face(tetrahedron,f4).
face(octahedron,f1).
face(octahedron,f2).
face(octahedron,f3).
face(octahedron,f4).
face(octahedron,f5).
face(octahedron,f6).
face(octahedron,f7).
face(octahedron,f8).


poly005
vertex_on_edge(P,V,E)
ascii:@V@ is on @E@ in @P@
vertex_on_edge(P,V,E) -> polyhedron(P)
vertex_on_edge(P,V,E) -> vertex(P,V)
vertex_on_edge(P,V,E) -> edge(P,E)
vertex_on_edge(cube,a,e1).
vertex_on_edge(cube,b,e1).
vertex_on_edge(cube,b,e2).
vertex_on_edge(cube,c,e2).
vertex_on_edge(cube,c,e3).
vertex_on_edge(cube,d,e3).
vertex_on_edge(cube,d,e4).
vertex_on_edge(cube,a,e4).
vertex_on_edge(cube,e,e5).
vertex_on_edge(cube,f,e5).
vertex_on_edge(cube,f,e6).
vertex_on_edge(cube,g,e6).
vertex_on_edge(cube,g,e7).
vertex_on_edge(cube,h,e7).
vertex_on_edge(cube,h,e8).
vertex_on_edge(cube,e,e8).
vertex_on_edge(cube,a,e9).
vertex_on_edge(cube,e,e9).
vertex_on_edge(cube,b,e10).
vertex_on_edge(cube,f,e10).
vertex_on_edge(cube,c,e11).
vertex_on_edge(cube,g,e11).
vertex_on_edge(cube,d,e12).
vertex_on_edge(cube,h,e12).
vertex_on_edge(tetrahedron,a,e1).
vertex_on_edge(tetrahedron,a,e3).
vertex_on_edge(tetrahedron,a,e4).
vertex_on_edge(tetrahedron,b,e1).
vertex_on_edge(tetrahedron,b,e2).
vertex_on_edge(tetrahedron,b,e6).
vertex_on_edge(tetrahedron,c,e2).
vertex_on_edge(tetrahedron,c,e3).
vertex_on_edge(tetrahedron,c,e5).
vertex_on_edge(tetrahedron,d,e4).
vertex_on_edge(tetrahedron,d,e5).
vertex_on_edge(tetrahedron,d,e6).
vertex_on_edge(octahedron,a,e1).
vertex_on_edge(octahedron,a,e2).
vertex_on_edge(octahedron,a,e3).
vertex_on_edge(octahedron,a,e4).
vertex_on_edge(octahedron,b,e1).
vertex_on_edge(octahedron,b,e5).
vertex_on_edge(octahedron,b,e8).
vertex_on_edge(octahedron,b,e9).
vertex_on_edge(octahedron,c,e2).
vertex_on_edge(octahedron,c,e5).
vertex_on_edge(octahedron,c,e6).
vertex_on_edge(octahedron,c,e10).
vertex_on_edge(octahedron,d,e3).
vertex_on_edge(octahedron,d,e6).
vertex_on_edge(octahedron,d,e7).
vertex_on_edge(octahedron,d,e11).
vertex_on_edge(octahedron,e,e4).
vertex_on_edge(octahedron,e,e7).
vertex_on_edge(octahedron,e,e8).
vertex_on_edge(octahedron,e,e12).
vertex_on_edge(octahedron,f,e9).
vertex_on_edge(octahedron,f,e10).
vertex_on_edge(octahedron,f,e11).
vertex_on_edge(octahedron,f,e12).

poly006
face_on_edge(P,F,E)
ascii:@F@ is on @E@ in @P@
face_on_edge(P,F,E) -> polyhedron(P)
face_on_edge(P,F,E) -> face(P,F)
face_on_edge(P,F,E) -> edge(P,E)
face_on_edge(cube,f1,e1).
face_on_edge(cube,f6,e1).
face_on_edge(cube,f2,e2).
face_on_edge(cube,f6,e2).
face_on_edge(cube,f3,e3).
face_on_edge(cube,f6,e3).
face_on_edge(cube,f4,e4).
face_on_edge(cube,f6,e4).
face_on_edge(cube,f1,e5).
face_on_edge(cube,f5,e5).
face_on_edge(cube,f2,e6).
face_on_edge(cube,f5,e6).
face_on_edge(cube,f3,e7).
face_on_edge(cube,f5,e7).
face_on_edge(cube,f4,e8).
face_on_edge(cube,f5,e8).
face_on_edge(cube,f1,e9).
face_on_edge(cube,f4,e9).
face_on_edge(cube,f1,e10).
face_on_edge(cube,f2,e10).
face_on_edge(cube,f2,e11).
face_on_edge(cube,f3,e11).
face_on_edge(cube,f3,e12).
face_on_edge(cube,f4,e12).
face_on_edge(tetrahedron,f1,e1).
face_on_edge(tetrahedron,f1,e2).
face_on_edge(tetrahedron,f1,e3).
face_on_edge(tetrahedron,f2,e1).
face_on_edge(tetrahedron,f2,e4).
face_on_edge(tetrahedron,f2,e6).
face_on_edge(tetrahedron,f3,e2).
face_on_edge(tetrahedron,f3,e5).
face_on_edge(tetrahedron,f3,e6).
face_on_edge(tetrahedron,f4,e4).
face_on_edge(tetrahedron,f4,e5).
face_on_edge(tetrahedron,f4,e6).
face_on_edge(octahedron,f1,e1).
face_on_edge(octahedron,f1,e2).
face_on_edge(octahedron,f1,e5).
face_on_edge(octahedron,f2,e2).
face_on_edge(octahedron,f2,e3).
face_on_edge(octahedron,f2,e6).
face_on_edge(octahedron,f3,e3).
face_on_edge(octahedron,f3,e4).
face_on_edge(octahedron,f3,e7).
face_on_edge(octahedron,f4,e1).
face_on_edge(octahedron,f4,e4).
face_on_edge(octahedron,f4,e8).
face_on_edge(octahedron,f5,e5).
face_on_edge(octahedron,f5,e9).
face_on_edge(octahedron,f5,e10).
face_on_edge(octahedron,f6,e6).
face_on_edge(octahedron,f6,e10).
face_on_edge(octahedron,f6,e11).
face_on_edge(octahedron,f7,e7).
face_on_edge(octahedron,f7,e11).
face_on_edge(octahedron,f7,e12).
face_on_edge(octahedron,f8,e8).
face_on_edge(octahedron,f8,e9).
face_on_edge(octahedron,f8,e12).

graph001
graph(G)
ascii:@G@ is a connected graph
graph(a[]).
graph(ab[ab]).
graph(abc[ab;ac;bc]).
graph(abc[ac;bc]).
graph(abcd[ab;ac;ad;bc;bd;cd]).
graph(abcd[ac;ad;bc;bd;cd]).
graph(abcd[ad;bc;bd;cd]).
graph(abcd[ad;bd;cd]).
graph(abcd[ad;bc;cd]).
graph(abcd[ac;ad;bc;bd]).
graph(abcde[ab;ac;ad;ae;bc;bd;be;cd;ce;de]).
graph(abcde[ac;ad;ae;bc;bd;be;cd;ce;de]).
graph(abcde[ad;ae;bc;bd;be;cd;ce;de]).
graph(abcde[ae;bc;bd;be;cd;ce;de]).
graph(abcde[ae;bd;be;cd;ce;de]).
graph(abcde[ae;be;cd;ce;de]).
graph(abcde[ae;be;ce;de]).
graph(abcde[ae;be;cd;de]).
graph(abcde[ae;bd;cd;ce;de]).
graph(abcde[ae;bd;cd;ce]).
graph(abcde[ae;bd;be;cd;ce]).
graph(abcde[ae;bc;bd;cd;ce;de]).
graph(abcde[ae;bc;bd;cd;de]).
graph(abcde[ad;ae;bd;be;cd;ce;de]).
graph(abcde[ad;ae;bd;be;cd;ce]).
graph(abcde[ad;ae;bc;be;cd;ce;de]).
graph(abcde[ad;ae;bc;be;ce;de]).
graph(abcde[ad;ae;bc;be;cd;de]).
graph(abcde[ad;ae;bc;be;cd]).
graph(abcde[ad;ae;bc;bd;be;cd;ce]).
graph(abcde[ac;ad;ae;bc;bd;be;ce;de]).
graph(abcdef[ab;ac;ad;ae;af;bc;bd;be;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[ac;ad;ae;af;bc;bd;be;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[ad;ae;af;bc;bd;be;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[ae;af;bc;bd;be;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[af;bc;bd;be;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[af;bd;be;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[af;be;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[af;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[af;bf;ce;cf;de;df;ef]).
graph(abcdef[af;bf;cf;de;df;ef]).
graph(abcdef[af;bf;cf;df;ef]).
graph(abcdef[af;bf;cf;de;ef]).
graph(abcdef[af;bf;ce;de;df;ef]).
graph(abcdef[af;bf;ce;de;ef]).
graph(abcdef[af;bf;ce;de;df]).
graph(abcdef[af;bf;ce;cf;de;df]).
graph(abcdef[af;bf;cd;ce;de;df;ef]).
graph(abcdef[af;bf;cd;ce;de;ef]).
graph(abcdef[af;be;cd;ce;cf;de;df;ef]).
graph(abcdef[af;be;ce;cf;de;df;ef]).
graph(abcdef[af;be;ce;cf;de;df]).
graph(abcdef[af;be;cd;cf;de;df;ef]).
graph(abcdef[af;be;cd;de;df;ef]).
graph(abcdef[af;be;cd;df;ef]).
graph(abcdef[af;be;cd;cf;df;ef]).
graph(abcdef[af;be;cd;cf;de;ef]).
graph(abcdef[af;be;cd;cf;de]).
graph(abcdef[af;be;cd;cf;de;df]).
graph(abcdef[af;be;cd;ce;cf;de;df]).
graph(abcdef[af;be;bf;ce;cf;de;df;ef]).
graph(abcdef[af;be;bf;ce;cf;de;df]).
graph(abcdef[af;be;bf;cd;cf;de;df;ef]).
graph(abcdef[af;be;bf;cd;cf;df;ef]).
graph(abcdef[af;be;bf;cd;cf;de;ef]).
graph(abcdef[af;be;bf;cd;cf;de]).
graph(abcdef[af;be;bf;cd;ce;de;df;ef]).
graph(abcdef[af;be;bf;cd;ce;de;ef]).
graph(abcdef[af;be;bf;cd;ce;de]).
graph(abcdef[af;be;bf;cd;ce;de;df]).
graph(abcdef[af;be;bf;cd;ce;cf;de;df]).
graph(abcdef[af;bd;be;cd;ce;cf;de;df;ef]).
graph(abcdef[af;bd;be;cd;ce;de;df;ef]).
graph(abcdef[af;bd;be;cd;ce;df;ef]).
graph(abcdef[af;bd;be;cd;ce;ef]).
graph(abcdef[af;bd;be;cd;ce;de;ef]).
graph(abcdef[af;bd;be;cd;ce;cf;df;ef]).
graph(abcdef[af;bd;be;cd;ce;cf;ef]).
graph(abcdef[af;bd;be;cd;ce;cf;de;ef]).
graph(abcdef[af;bd;be;cd;ce;cf;de]).
graph(abcdef[af;bd;be;bf;cd;ce;cf;df;ef]).
graph(abcdef[af;bd;be;bf;cd;ce;cf;de;ef]).
graph(abcdef[af;bd;be;bf;cd;ce;cf;de]).
graph(abcdef[af;bc;bd;be;cd;ce;cf;de;df;ef]).
graph(abcdef[af;bc;bd;be;cd;ce;de;df;ef]).
graph(abcdef[af;bc;bd;be;cd;ce;de;ef]).
graph(abcdef[ae;af;bd;be;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[ae;af;be;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[ae;af;be;bf;ce;cf;de;df;ef]).
graph(abcdef[ae;af;be;bf;ce;cf;de;df]).
graph(abcdef[ae;af;be;bf;cd;cf;de;df;ef]).
graph(abcdef[ae;af;be;bf;cd;cf;df;ef]).
graph(abcdef[ae;af;be;bf;cd;cf;df]).
graph(abcdef[ae;af;be;bf;cd;cf;de;ef]).
graph(abcdef[ae;af;be;bf;cd;cf;de]).
graph(abcdef[ae;af;be;bf;cd;cf;de;df]).
graph(abcdef[ae;af;be;bf;cd;ce;cf;de;df]).
graph(abcdef[ae;af;bd;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[ae;af;bd;bf;cd;ce;de;df;ef]).
graph(abcdef[ae;af;bd;bf;cd;ce;df;ef]).
graph(abcdef[ae;af;bd;bf;cd;ce;ef]).
graph(abcdef[ae;af;bd;bf;cd;ce]).
graph(abcdef[ae;af;bd;bf;cd;ce;cf;df;ef]).
graph(abcdef[ae;af;bd;bf;cd;ce;cf;ef]).
graph(abcdef[ae;af;bd;bf;cd;ce;cf]).
graph(abcdef[ae;af;bd;bf;cd;ce;cf;de;ef]).
graph(abcdef[ae;af;bd;bf;cd;ce;cf;de]).
graph(abcdef[ae;af;bd;be;bf;cd;ce;cf;df;ef]).
graph(abcdef[ae;af;bd;be;bf;cd;ce;cf;ef]).
graph(abcdef[ae;af;bd;be;bf;cd;ce;cf]).
graph(abcdef[ae;af;bd;be;bf;cd;ce;cf;df]).
graph(abcdef[ae;af;bd;be;bf;cd;ce;cf;de;df]).
graph(abcdef[ae;af;bc;bd;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[ae;af;bc;bd;cd;ce;cf;de;df;ef]).
graph(abcdef[ae;af;bc;bd;cd;cf;de;df;ef]).
graph(abcdef[ae;af;bc;bd;cd;de;df;ef]).
graph(abcdef[ae;af;bc;bd;cd;df;ef]).
graph(abcdef[ae;af;bc;bd;cd;cf;de;ef]).
graph(abcdef[ae;af;bc;bd;bf;cd;cf;de;df;ef]).
graph(abcdef[ae;af;bc;bd;bf;cd;cf;df;ef]).
graph(abcdef[ae;af;bc;bd;bf;cd;cf;de;ef]).
graph(abcdef[ae;af;bc;bd;bf;cd;cf;de]).
graph(abcdef[ae;af;bc;bd;bf;cd;cf;de;df]).
graph(abcdef[ae;af;bc;bd;bf;cd;ce;de;df;ef]).
graph(abcdef[ae;af;bc;bd;bf;cd;ce;de;df]).
graph(abcdef[ae;af;bc;bd;bf;cd;ce;cf;de;df]).
graph(abcdef[ae;af;bc;bd;be;bf;cd;ce;cf;de;df]).
graph(abcdef[ad;ae;af;bd;be;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[ad;ae;af;bd;be;bf;cd;ce;cf;df;ef]).
graph(abcdef[ad;ae;af;bd;be;bf;cd;ce;cf;ef]).
graph(abcdef[ad;ae;af;bd;be;bf;cd;ce;cf]).
graph(abcdef[ad;ae;af;bc;be;bf;cd;ce;cf;de;df;ef]).
graph(abcdef[ad;ae;af;bc;be;bf;ce;cf;de;df;ef]).
graph(abcdef[ad;ae;af;bc;be;bf;ce;cf;de;df]).
graph(abcdef[ad;ae;af;bc;be;bf;cd;cf;de;df;ef]).
graph(abcdef[ad;ae;af;bc;be;bf;cd;cf;df;ef]).
graph(abcdef[ad;ae;af;bc;be;bf;cd;cf;de;ef]).
graph(abcdef[ad;ae;af;bc;be;bf;cd;cf;de]).
graph(abcdef[ad;ae;af;bc;be;bf;cd;ce;cf;de;df]).
graph(abcdef[ad;ae;af;bc;bd;be;bf;cd;ce;cf;df;ef]).
graph(abcdef[ad;ae;af;bc;bd;be;bf;cd;ce;cf;ef]).
graph(abcdef[ac;ad;ae;af;bc;bd;be;bf;ce;cf;de;df;ef]).
graph(abcdef[ac;ad;ae;af;bc;bd;be;bf;ce;cf;de;df]).

graph002
node(G,N)
ascii:@N@ is a node of @G@
node(G,N) -> graph(G)
Code:

graph003
edge(G,E)
ascii:@E@ is an edge of @G@
edge(G,E) -> graph(G)
Code:

graph004
node_on_edge(G,N,E)
ascii:@N@ is on @E@ in @G@
node_on_edge(G,N,E) -> graph(G)
node_on_edge(G,N,E) -> node(G,N)
node_on_edge(G,N,E) -> edge(G,E)
Code:

poly008
test(P,T)
ascii:@T@ is a test of @P@
test(P,T) -> polyhedron(P)
test(cube,t1).