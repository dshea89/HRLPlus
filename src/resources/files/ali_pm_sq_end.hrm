clickList("domain_list", "numtheorymid.hrd", "true");
clickButton("initial_entity_none_button");
clickList("initial_entity_list", "integer:1", "true");
clickList("initial_entity_list", "integer:2", "true");
clickList("initial_entity_list", "integer:3", "true");
clickList("initial_entity_list", "integer:4", "true");
clickList("initial_entity_list", "integer:5", "true");
clickList("initial_entity_list", "integer:6", "true");
clickList("initial_entity_list", "integer:7", "true");
clickList("initial_entity_list", "integer:8", "true");
clickList("initial_entity_list", "integer:9", "true");
clickList("initial_entity_list", "integer:10", "true");
clickList("initial_concepts_list", "addition", "false");
clickList("initial_concepts_list", "binary", "false");
clickList("initial_concepts_list", "tau", "false");
clickList("initial_concepts_list", "sigma", "false");
clickList("initial_concepts_list", "phi", "false");
clickList("initial_concepts_list", "prevprime", "false");
clickList("initial_concepts_list", "isprime", "false");
clickList("initial_concepts_list", "isrefactorable", "false");
clickList("initial_concepts_list", "issqrfree", "false");
clickList("initial_concepts_list", "issquare", "false");
clickList("initial_concepts_list", "isodd", "false");
clickList("initial_concepts_list", "iseven", "false");
clickCheckbox("disjunct_check", "false");
clickCheckbox("embed_algebra_check", "false");
clickCheckbox("embed_graph_check", "false");
clickCheckbox("equal_check", "false");
clickCheckbox("record_check", "false");
clickList("split_values_list", "integer:1", "true");
clickList("split_values_list", "integer:2", "true");
clickList("conjecture_formatting_list", "ascii format", "false");
clickList("conjecture_formatting_list", "simplified format", "true");
clickCheckbox("make_near_equivalences_check", "true");
setText("near_equivalence_percent_text", "60");
clickCheckbox("use_surrender_check", "false");
clickCheckbox("use_piecemeal_exclusion_check", "true");
clickCheckbox("use_communal_piecemeal_exclusion_check", "false");
clickCheckbox("use_strategic_withdrawal_check", "false");
clickButton("start_button");
clickList("force_primary_concept_list", "int003", "true");
clickList("force_prodrule_list", "size", "true");
setText("force_string_text", "step = int003 size [1]");
clickButton("force_button");
clickList("force_primary_concept_list", "i6_0", "true");
clickList("force_primary_concept_list", "int003", "true");
clickList("force_prodrule_list", "split", "true");
setText("force_string_text", "step = int003 split [[1],[2]]");
clickButton("force_button");
clickList("force_primary_concept_list", "i6_0", "true");
clickList("force_secondary_concept_list", "i7_0", "true");
clickList("force_prodrule_list", "compose", "true");
setText("force_string_text", "step = i6_0 i7_0 [0,1]");
clickButton("force_button");
setText("force_string_text", "step = i6_0 i7_0 compose [0,1]");
clickButton("force_button");
clickList("force_primary_concept_list", "i8_0", "true");
clickList("force_prodrule_list", "exists", "true");
setText("force_string_text", "step = i8_0 exists [1]");
clickButton("force_button");
clickList("force_primary_concept_list", "int005", "true");
clickList("force_prodrule_list", "match", "true");
setText("force_string_text", "step = int005 match");
clickList("force_parameter_list", "[0, 1, 1]: [a, b] : a is an integer & b is an integer & b=<a & b|a & b*b=a", "true");
clickButton("force_button");
clickList("force_primary_concept_list", "i10_0", "true");
clickList("force_prodrule_list", "exists", "true");
clickList("force_parameter_list", "[1]: [a] : a is an integer & exists b (b is an integer & b=<a & b|a & b*b=a)", "true");
clickButton("force_button");
